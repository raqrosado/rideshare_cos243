{
  "openapi": "3.0.0",
  "info": {
    "title": "Ride Share API",
    "description": "`API` for **COS 243** Semester Project",
    "version": "0.1.0"
  },
  "tags": [
    {
      "name": "user",
      "description": "Ride Share users"
    },
    {
      "name": "vehicle-type",
      "description": "Vehicle types"
    }
  ],
  "components": {
    "schemas": {
      "Error": {
        "description": "Generic error message",
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Something strange happened."
        }
      },
      "User": {
        "description": "Each user of **Ride Share**",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          }
        },
        "example": {
          "id": 42,
          "firstName": "Fred",
          "lastName": "Ziffle",
          "email": "fred@example.com",
          "password": "super-secret-thing",
          "phone": "765-555-1212",
          "isAdmin": false
        }
      },
      "VehicleType": {
        "description": "Type of a vehicle",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "vehicleType": {
            "type": "string"
          }
        },
        "example": {
          "id": 42,
          "type": "Pickup Truck"
        }
      },
      "Vehicle": {
        "description": "Vehicle description",
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "make" : { "type": "string" },
          "model" : { "type": "string" },
          "color" : { "type": "string" },
          "vehicleTypeId": { "type": "integer" },
          "capacity" : { "type": "integer" },
          "mpg" : { "type": "float" },
          "licenseState" : { "type": "integer" },
          "licensePlate" : { "type": "string" }
        },
        "example": {
          "id": 12,
          "make" : "Buick",
          "model" : "Park Avenue",
          "color" : "Navy",
          "vehicleTypeId": 48,
          "capacity" : 1000,
          "mpg" : 29,
          "licenseState" : 49,
          "licensePlate" : "BUCKSN6"
        }
      },
      "Ride": {
        "description": "Every Ride from **RideShare**",
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "date": { "type": "date" },
          "time": { "type": "time" },
          "distance": { "type": "float" },
          "fuelPrice": { "type": "float" },
          "fee": { "type": "float" },
          "vehicleId": { "type": "integer" },
          "fromLocationId": { "type": "integer" },
          "toLocationId": { "type": "integer" }
        },
        "example": {
          "id": 22,
          "date": "2021-12-01",
          "time": "T22:18:26.625Z",
          "distance": 250,
          "fuelPrice": 3.16,
          "fee": 8.99,
          "vehicleId": 12,
          "fromLocationId": 18,
          "toLocationId": 19
        }
      },
      "Location": {
        "description": "The starting and ending Locations for Rides",
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "address": { "type": "string" },
          "city": { "type": "string" },
          "state": { "type": "string" },
          "zipCode": { "type": "string" }
        },
        "example": {
          "id": 18,
          "name": "The Bean",
          "address": "25 N Michigan Ave",
          "city": "Chicago",
          "state": "IL",
          "zipCode": "60602"
        }
      },




    }
  },
  "paths": {
    "/users": {
      "summary": "Operations on users",
      "get": {
        "summary": "Get all users",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "All users fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "tags": [
          "user"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created sucessfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "integer"
                    }
                  },
                  "example": {
                    "userId": 42
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Duplicate email address"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "summary": "Operations on a single user",
      "get": {
        "summary": "Get user by ID",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of user to fetch",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "User not found"
          }
        }
      }
    },
    "/vehicle-types": {
      "post": {
        "summary": "Create a new vehicle type.",
        "description": "_Each_ vehicle in **Ride Share** has a `type`, making it easier for riders to identify the vehicle.",
        "tags": [
          "vehicle-type"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vehicleType": {
                    "type": "string"
                  }
                },
                "example": {
                  "vehicleType": "Pickup Truck"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New vehicle type created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleType"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve all vehicle types",
        "tags": [
          "vehicle-type"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vehicle-types/{id}": {
      "patch": {
        "summary": "Update an existing vehicle type",
        "tags": [
          "vehicle-type"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Updated vehicle type",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vehicleType": {
                    "type": "string"
                  }
                },
                "example": {
                  "vehicleType": "SUV"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleType"
                }
              }
            }
          },
          "400": {
            "description": "No such vehicle ID"
          }
        }
      },
      "delete": {
        "summary": "Delete an existing vehicle type",
        "tags": [
          "vehicle-type"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle deleted"
          },
          "400": {
            "description": "Can't delete vehicle"
          }
        }
      }
    }
  },
  "/rides": {
    "post": {
      "summary": "Create a new ride.",
      "description": "_Each_ ride in **Ride Share** has a unique id, making it easier for riders to identify the ride.",
      "tags": [
        "rides"
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "drivers": {
                  "type": "array"
                },
                "passengers": {
                  "type": "array"
                },
                "toLocation": {
                  "type": "string"
                },
                "fromLocation": {
                  "type": "string"
                }
              },
              "example": {
                "id": "0001",
                "drivers": "['Fred Ziffle','Franz Kafka']",
                "passengers": "['Mao Zedong','Mikhail Gorbachev']",
                "fromLocation": "001 Market Street, Juniper, WA 40357",
                "toLocation": "007 Mabel Street, Pablo, WY 40383"
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "New ride created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rides"
              }
            }
          }
        }
      }
    },
    "get": {
      "summary": "Retrieve all rides",
      "tags": [
        "rides"
      ],
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Rides"
                }
              }
            }
          }
        }
      }
    }
  },
  "/rides/{id}": {
    "patch": {
      "summary": "Update an existing ride",
      "tags": [
        "rides"
      ],
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "schema": {
            "type": "integer"
          },
          "required": true
        }
      ],
      "requestBody": {
        "description": "Updated ride",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "drivers": {
                  "type": "array"
                },
                "passengers": {
                  "type": "array"
                },
                "toLocation": {
                  "type": "string"
                },
                "fromLocation": {
                  "type": "string"
                }
              },
              "example": {
                "drivers": "['Fred Ziffle','Franz Kafka']",
                "passengers": "['Mao Zedong','Mikhail Gorbachev']",
                "fromLocation": "001 Market Street, Juniper, WA 40357",
                "toLocation": "007 Mabel Street, Pablo, WY 40383"
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rides"
              }
            }
          }
        },
        "400": {
          "description": "No such ride ID"
        }
      }
    },
    "delete": {
      "summary": "Delete an existing ride",
      "tags": [
        "ride"
      ],
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "schema": {
            "type": "integer"
          },
          "required": true
        }
      ],
      "responses": {
        "200": {
          "description": "Ride deleted"
        },
        "400": {
          "description": "Can't delete ride"
        }
      }
    }
  }
}